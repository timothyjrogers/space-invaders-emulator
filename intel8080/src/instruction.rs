/*
use std::fmt;
use std::collections::HashMap;

pub struct Instruction {
    opcode: u8,
    size: usize,
    cycles: usize,
    label: String,
}

impl Instruction {
    pub fn new(opcode: u8, size: size, cycles: usize, label: String) {
        Self { opcode, size, cycles, label: label.into()}
    }
}

impl fmt::Display for Instruction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{} {} | {} cycles", self.opcode, self.label, self.cycles)
    }
}

pub const NOP: u8 = 0x00;
pub const LXI_B_D16: u8 = 0x01;
pub const STAX_B: u8 = 0x02;
pub const INX_B: u8 = 0x03;
pub const INR_B: u8 = 0x04;
pub const DCR_B: u8 = 0x05;
pub const MVI_B_D8: u8 = 0x06;
pub const RLC: u8 = 0x07;
pub const DAD_B: u8 = 0x09;
pub const LDAX_B: u8 = 0x0a;
pub const DCX_B: u8 = 0x0b;
pub const INR_C: u8 = 0x0c;
pub const DCR_C: u8 = 0x0d;
pub const MVI_C_D8: u8 = 0x0e;
pub const RRC: u8 = 0x0f;
pub const LXI_D_D16: u8 = 0x11;
pub const STAX_D: u8 = 0x12;
pub const INX_D: u8 = 0x13;
pub const INR_D: u8 = 0x14;
pub const DCR_D: u8 = 0x15;
pub const MVI_D_D8: u8 = 0x16;
pub const RAL: u8 = 0x17;
pub const DAD_D: u8 = 0x19;
pub const LDAX_D: u8 = 0x1a;
pub const DCX_D: u8 = 0x1b;
pub const INR_E: u8 = 0x1c;
pub const DCR_E: u8 = 0x1d;
pub const MVI_E_D8: u8 = 0x1e;
pub const RAR: u8 = 0x1f;
pub const LXI_H_D16: u8 = 0x21;
pub const SHLD_ADR: u8 = 0x22;
pub const INX_H: u8 = 0x23;
pub const INR_H: u8 = 0x24;
pub const DCR_H: u8 = 0x25;
pub const MVI_H_D8: u8 = 0x26;
pub const DAA: u8 = 0x27;
pub const DAD_H: u8 = 0x29;
pub const LHLD_ADR: u8 = 0x2a;
pub const DCX_H: u8 = 0x2b;
pub const INR_L: u8 = 0x2c;
pub const DCR_L: u8 = 0x2d;
pub const MVI_L_D8: u8 = 0x2e;
pub const CMA: u8 = 0x2f;
pub const LXI_SP_D16: u8 = 0x31;
pub const STA_ADR: u8 = 0x32;
pub const INX_SP: u8 = 0x33;
pub const INR_M: u8 = 0x34;
pub const DCR_M: u8 = 0x35;
pub const MVI_M_D8: u8 = 0x36;
pub const STC: u8 = 0x37;
pub const DAD_SP: u8 = 0x39;
pub const LDA_ADR: u8 = 0x3a;
pub const DCX_SP: u8 = 0x3b;
pub const INR_A: u8 = 0x3c;
pub const DCR_A: u8 = 0x3d;
pub const MVI_A_D8: u8 = 0x3e;
pub const CMC: u8 = 0x3f;
pub const MOV_B_B: u8 = 0x40;
pub const MOV_B_C: u8 = 0x41;
pub const MOV_B_D: u8 = 0x42;
pub const MOV_B_E: u8 = 0x43;
pub const MOV_B_H: u8 = 0x44;
pub const MOV_B_L: u8 = 0x45;
pub const MOV_B_M: u8 = 0x46;
pub const MOV_B_A: u8 = 0x47;
pub const MOV_C_B: u8 = 0x48;
pub const MOV_C_C: u8 = 0x49;
pub const MOV_C_D: u8 = 0x4a;
pub const MOV_C_E: u8 = 0x4b;
pub const MOV_C_H: u8 = 0x4c;
pub const MOV_C_L: u8 = 0x4d;
pub const MOV_C_M: u8 = 0x4e;
pub const MOV_C_A: u8 = 0x4f;
pub const MOV_D_B: u8 = 0x50;
pub const MOV_D_C: u8 = 0x51;
pub const MOV_D_D: u8 = 0x52;
pub const MOV_D_E: u8 = 0x53;
pub const MOV_D_H: u8 = 0x54;
pub const MOV_D_L: u8 = 0x55;
pub const MOV_D_M: u8 = 0x56;
pub const MOV_D_A: u8 = 0x57;
pub const MOV_E_B: u8 = 0x58;
pub const MOV_E_C: u8 = 0x59;
pub const MOV_E_D: u8 = 0x5a;
pub const MOV_E_E: u8 = 0x5b;
pub const MOV_E_H: u8 = 0x5c;
pub const MOV_E_L: u8 = 0x5d;
pub const MOV_E_M: u8 = 0x5e;
pub const MOV_E_A: u8 = 0x5f;
pub const MOV_H_B: u8 = 0x60;
pub const MOV_H_C: u8 = 0x61;
pub const MOV_H_D: u8 = 0x62;
pub const MOV_H_E: u8 = 0x63;
pub const MOV_H_H: u8 = 0x64;
pub const MOV_H_L: u8 = 0x65;
pub const MOV_H_M: u8 = 0x66;
pub const MOV_H_A: u8 = 0x67;
pub const MOV_L_B: u8 = 0x68;
pub const MOV_L_C: u8 = 0x69;
pub const MOV_L_D: u8 = 0x6a;
pub const MOV_L_E: u8 = 0x6b;
pub const MOV_L_H: u8 = 0x6c;
pub const MOV_L_L: u8 = 0x6d;
pub const MOV_L_M: u8 = 0x6e;
pub const MOV_L_A: u8 = 0x6f;
pub const MOV_M_B: u8 = 0x70;
pub const MOV_M_C: u8 = 0x71;
pub const MOV_M_D: u8 = 0x72;
pub const MOV_M_E: u8 = 0x73;
pub const MOV_M_H: u8 = 0x74;
pub const MOV_M_L: u8 = 0x75;
pub const HLT: u8 = 0x76;
pub const MOV_M_A: u8 = 0x77;
pub const MOV_A_B: u8 = 0x78;
pub const MOV_A_C: u8 = 0x79;
pub const MOV_A_D: u8 = 0x7a;
pub const MOV_A_E: u8 = 0x7b;
pub const MOV_A_H: u8 = 0x7c;
pub const MOV_A_L: u8 = 0x7d;
pub const MOV_A_M: u8 = 0x7e;
pub const MOV_A_A: u8 = 0x7f;
pub const ADD_B: u8 = 0x80;
pub const ADD_C: u8 = 0x81;
pub const ADD_D: u8 = 0x82;
pub const ADD_E: u8 = 0x83;
pub const ADD_H: u8 = 0x84;
pub const ADD_L: u8 = 0x85;
pub const ADD_M: u8 = 0x86;
pub const ADD_A: u8 = 0x87;
pub const ADC_B: u8 = 0x88;
pub const ADC_C: u8 = 0x89;
pub const ADC_D: u8 = 0x8a;
pub const ADC_E: u8 = 0x8b;
pub const ADC_H: u8 = 0x8c;
pub const ADC_L: u8 = 0x8d;
pub const ADC_M: u8 = 0x8e;
pub const ADC_A: u8 = 0x8f;
pub const SUB_B: u8 = 0x90;
pub const SUB_C: u8 = 0x91;
pub const SUB_D: u8 = 0x92;
pub const SUB_E: u8 = 0x93;
pub const SUB_H: u8 = 0x94;
pub const SUB_L: u8 = 0x95;
pub const SUB_M: u8 = 0x96;
pub const SUB_A: u8 = 0x97;
pub const SBB_B: u8 = 0x98;
pub const SBB_C: u8 = 0x99;
pub const SBB_D: u8 = 0x9a;
pub const SBB_E: u8 = 0x9b;
pub const SBB_H: u8 = 0x9c;
pub const SBB_L: u8 = 0x9d;
pub const SBB_M: u8 = 0x9e;
pub const SBB_A: u8 = 0x9f;
pub const ANA_B: u8 = 0xa0;
pub const ANA_C: u8 = 0xa1;
pub const ANA_D: u8 = 0xa2;
pub const ANA_E: u8 = 0xa3;
pub const ANA_H: u8 = 0xa4;
pub const ANA_L: u8 = 0xa5;
pub const ANA_M: u8 = 0xa6;
pub const ANA_A: u8 = 0xa7;
pub const XRA_B: u8 = 0xa8;
pub const XRA_C: u8 = 0xa9;
pub const XRA_D: u8 = 0xaa;
pub const XRA_E: u8 = 0xab;
pub const XRA_H: u8 = 0xac;
pub const XRA_L: u8 = 0xad;
pub const XRA_M: u8 = 0xae;
pub const XRA_A: u8 = 0xaf;
pub const ORA_B: u8 = 0xb0;
pub const ORA_C: u8 = 0xb1;
pub const ORA_D: u8 = 0xb2;
pub const ORA_E: u8 = 0xb3;
pub const ORA_H: u8 = 0xb4;
pub const ORA_L: u8 = 0xb5;
pub const ORA_M: u8 = 0xb6;
pub const ORA_A: u8 = 0xb7;
pub const CMP_B: u8 = 0xb8;
pub const CMP_C: u8 = 0xb9;
pub const CMP_D: u8 = 0xba;
pub const CMP_E: u8 = 0xbb;
pub const CMP_H: u8 = 0xbc;
pub const CMP_L: u8 = 0xbd;
pub const CMP_M: u8 = 0xbe;
pub const CMP_A: u8 = 0xbf;
pub const RNZ: u8 = 0xc0;
pub const POP_B: u8 = 0xc1;
pub const JNZ_ADR: u8 = 0xc2;
pub const JMP_ADR: u8 = 0xc3;
pub const CNZ_ADR: u8 = 0xc4;
pub const PUSH_B: u8 = 0xc5;
pub const ADI_D8: u8 = 0xc6;
pub const RST_0: u8 = 0xc7;
pub const RZ: u8 = 0xc8;
pub const RET: u8 = 0xc9;
pub const JZ_ADR: u8 = 0xca;
pub const CZ_ADR: u8 = 0xcc;
pub const CALL_ADR: u8 = 0xcd;
pub const ACI_D8: u8 = 0xce;
pub const RST_1: u8 = 0xcf;
pub const RNC: u8 = 0xd0;
pub const POP_D: u8 = 0xd1;
pub const JNC_ADR: u8 = 0xd2;
pub const OUT_D8: u8 = 0xd3;
pub const CNC_ADR: u8 = 0xd4;
pub const PUSH_D: u8 = 0xd5;
pub const SUI_D8: u8 = 0xd6;
pub const RST_2: u8 = 0xd7;
pub const RC: u8 = 0xd8;
pub const JC_ADR: u8 = 0xda;
pub const IN_D8: u8 = 0xdb;
pub const CC_ADR: u8 = 0xdc;
pub const SBI_D8: u8 = 0xde;
pub const RST_3: u8 = 0xdf;
pub const RPO: u8 = 0xe0;
pub const POP_H: u8 = 0xe1;
pub const JPO_ADR: u8 = 0xe2;
pub const XTHL: u8 = 0xe3;
pub const CPO_ADR: u8 = 0xe4;
pub const PUSH_H: u8 = 0xe5;
pub const ANI_D8: u8 = 0xe6;
pub const RST_4: u8 = 0xe7;
pub const RPE: u8 = 0xe8;
pub const PCHL: u8 = 0xe9;
pub const JPE_ADR: u8 = 0xea;
pub const XCHG: u8 = 0xeb;
pub const CPE_ADR: u8 = 0xec;
pub const XRI_D8: u8 = 0xee;
pub const RST_5: u8 = 0xef;
pub const RP: u8 = 0xf0;
pub const POP_PSW: u8 = 0xf1;
pub const JP_ADR: u8 = 0xf2;
pub const DI: u8 = 0xf3;
pub const CP_ADR: u8 = 0xf4;
pub const PUSH_PSW: u8 = 0xf5;
pub const ORI_D8: u8 = 0xf6;
pub const RST_6: u8 = 0xf7;
pub const RM: u8 = 0xf8;
pub const SPHL: u8 = 0xf9;
pub const JM_ADR: u8 = 0xfa;
pub const EI: u8 = 0xfb;
pub const CM_ADR: u8 = 0xfc;
pub const CPI_D8: u8 = 0xfe;
pub const RST_7: u8 = 0xff;

lazy_static! {
    static ref INSTRUCTIONS: HashMap<u8, Instruction> = {
        let mut hm = HashMap<u8, Instruction>::new();
        hm.insert(NOP, Instruction::new(0x00, 1, 4, "NOP"));
        hm.insert(LXI_B_D16, Instruction::new(0x01, 3, 10, "LXI_B_D16"));
        hm.insert(STAX_B, Instruction::new(0x02, 1, 7, "STAX_B"));
        hm.insert(INX_B, Instruction::new(0x03, 1, 5, "INX_B"));
        hm.insert(INR_B, Instruction::new(0x04, 1, 5, "INR_B"));
        hm.insert(DCR_B, Instruction::new(0x05, 1, 5, "DCR_B"));
        hm.insert(MVI_B_D8, Instruction::new(0x06, 2, 7, "MVI_B_D8"));
        hm.insert(RLC, Instruction::new(0x07, 1, 4, "RLC"));
        hm.insert(DAD_B, Instruction::new(0x09, 1, 10, "DAD_B"));
        hm.insert(LDAX_B, Instruction::new(0x0a, 1, 7, "LDAX_B"));
        hm.insert(DCX_B, Instruction::new(0x0b, 1, 5, "DCX_B"));
        hm.insert(INR_C, Instruction::new(0x0c, 1, 5, "INR_C"));
        hm.insert(DCR_C, Instruction::new(0x0d, 1, 5, "DCR_C"));
        hm.insert(MVI_C_D8, Instruction::new(0x0e, 2, 7, "MVI_C_D8"));
        hm.insert(RRC, Instruction::new(0x0f, 1, 4, "RRC"));
        hm.insert(LXI_D_D16, Instruction::new(0x11, 3, 10, "LXI_D_D16"));
        hm.insert(STAX_D, Instruction::new(0x12, 1, 7, "STAX_D"));
        hm.insert(INX_D, Instruction::new(0x13, 1, 5, "INX_D"));
        hm.insert(INR_D, Instruction::new(0x14, 1, 5, "INR_D"));
        hm.insert(DCR_D, Instruction::new(0x15, 1, 5, "DCR_D"));
        hm.insert(MVI_D_D8, Instruction::new(0x16, 2, 7, "MVI_D_D8"));
        hm.insert(RAL, Instruction::new(0x17, 1, 4, "RAL"));
        hm.insert(DAD_D, Instruction::new(0x19, 1, 10, "DAD_D"));
        hm.insert(LDAX_D, Instruction::new(0x1a, 1, 7, "LDAX_D"));
        hm.insert(DCX_D, Instruction::new(0x1b, 1, 5, "DCX_D"));
        hm.insert(INR_E, Instruction::new(0x1c, 1, 5, "INR_E"));
        hm.insert(DCR_E, Instruction::new(0x1d, 1, 5, "DCR_E"));
        hm.insert(MVI_E_D8, Instruction::new(0x1e, 2, 7, "MVI_E_D8"));
        hm.insert(RAR, Instruction::new(0x1f, 1, 4, "RAR"));
        hm.insert(LXI_H_D16, Instruction::new(0x21, 3, 10, "LXI_H_D16"));
        hm.insert(SHLD_ADR, Instruction::new(0x22, 3, 16, "SHLD_ADR"));
        hm.insert(INX_H, Instruction::new(0x23, 1, 5, "INX_H"));
        hm.insert(INR_H, Instruction::new(0x24, 1, 5, "INR_H"));
        hm.insert(DCR_H, Instruction::new(0x25, 1, 5, "DCR_H"));
        hm.insert(MVI_H_D8, Instruction::new(0x26, 2, 7, "MVI_H_D8"));
        hm.insert(DAA, Instruction::new(0x27, 1, 4, "DAA"));
        hm.insert(DAD_H, Instruction::new(0x29, 1, 10, "DAD_H"));
        hm.insert(LHLD_ADR, Instruction::new(0x2a, 3, 16, "LHLD_ADR"));
        hm.insert(DCX_H, Instruction::new(0x2b, 1, 5, "DCX_H"));
        hm.insert(INR_L, Instruction::new(0x2c, 1, 5, "INR_L"));
        hm.insert(DCR_L, Instruction::new(0x2d, 1, 5, "DCR_L"));
        hm.insert(MVI_L_D8, Instruction::new(0x2e, 2, 7, "MVI_L_D8"));
        hm.insert(CMA, Instruction::new(0x2f, 1, 4, "CMA"));
        hm.insert(LXI_SP_D16, Instruction::new(0x31, 3, 10, "LXI_SP_D16"));
        hm.insert(STA_ADR, Instruction::new(0x32, 3, 13, "STA_ADR"));
        hm.insert(INX_SP, Instruction::new(0x33, 1, 5, "INX_SP"));
        hm.insert(INR_M, Instruction::new(0x34, 1, 10, "INR_M"));
        hm.insert(DCR_M, Instruction::new(0x35, 1, 10, "DCR_M"));
        hm.insert(MVI_M_D8, Instruction::new(0x36, 2, 10, "MVI_M_D8"));
        hm.insert(STC, Instruction::new(0x37, 1, 4, "STC"));
        hm.insert(DAD_SP, Instruction::new(0x39, 1, 10, "DAD_SP"));
        hm.insert(LDA_ADR, Instruction::new(0x3a, 3, 13, "LDA_ADR"));
        hm.insert(DCX_SP, Instruction::new(0x3b, 1, 5, "DCX_SP"));
        hm.insert(INR_A, Instruction::new(0x3c, 1, 5, "INR_A"));
        hm.insert(DCR_A, Instruction::new(0x3d, 1, 5, "DCR_A"));
        hm.insert(MVI_A_D8, Instruction::new(0x3e, 2, 7, "MVI_A_D8"));
        hm.insert(CMC, Instruction::new(0x3f, 1, 4, "CMC"));
        hm.insert(MOV_B_B, Instruction::new(0x40, 1, 5, "MOV_B_B"));
        hm.insert(MOV_B_C, Instruction::new(0x41, 1, 5, "MOV_B_C"));
        hm.insert(MOV_B_D, Instruction::new(0x42, 1, 5, "MOV_B_D"));
        hm.insert(MOV_B_E, Instruction::new(0x43, 1, 5, "MOV_B_E"));
        hm.insert(MOV_B_H, Instruction::new(0x44, 1, 5, "MOV_B_H"));
        hm.insert(MOV_B_L, Instruction::new(0x45, 1, 5, "MOV_B_L"));
        hm.insert(MOV_B_M, Instruction::new(0x46, 1, 7, "MOV_B_M"));
        hm.insert(MOV_B_A, Instruction::new(0x47, 1, 5, "MOV_B_A"));
        hm.insert(MOV_C_B, Instruction::new(0x48, 1, 5, "MOV_C_B"));
        hm.insert(MOV_C_C, Instruction::new(0x49, 1, 5, "MOV_C_C"));
        hm.insert(MOV_C_D, Instruction::new(0x4a, 1, 5, "MOV_C_D"));
        hm.insert(MOV_C_E, Instruction::new(0x4b, 1, 5, "MOV_C_E"));
        hm.insert(MOV_C_H, Instruction::new(0x4c, 1, 5, "MOV_C_H"));
        hm.insert(MOV_C_L, Instruction::new(0x4d, 1, 5, "MOV_C_L"));
        hm.insert(MOV_C_M, Instruction::new(0x4e, 1, 7, "MOV_C_M"));
        hm.insert(MOV_C_A, Instruction::new(0x4f, 1, 5, "MOV_C_A"));
        hm.insert(MOV_D_B, Instruction::new(0x50, 1, 5, "MOV_D_B"));
        hm.insert(MOV_D_C, Instruction::new(0x51, 1, 5, "MOV_D_C"));
        hm.insert(MOV_D_D, Instruction::new(0x52, 1, 5, "MOV_D_D"));
        hm.insert(MOV_D_E, Instruction::new(0x53, 1, 5, "MOV_D_E"));
        hm.insert(MOV_D_H, Instruction::new(0x54, 1, 5, "MOV_D_H"));
        hm.insert(MOV_D_L, Instruction::new(0x55, 1, 5, "MOV_D_L"));
        hm.insert(MOV_D_M, Instruction::new(0x56, 1, 7, "MOV_D_M"));
        hm.insert(MOV_D_A, Instruction::new(0x57, 1, 5, "MOV_D_A"));
        hm.insert(MOV_E_B, Instruction::new(0x58, 1, 5, "MOV_E_B"));
        hm.insert(MOV_E_C, Instruction::new(0x59, 1, 5, "MOV_E_C"));
        hm.insert(MOV_E_D, Instruction::new(0x5a, 1, 5, "MOV_E_D"));
        hm.insert(MOV_E_E, Instruction::new(0x5b, 1, 5, "MOV_E_E"));
        hm.insert(MOV_E_H, Instruction::new(0x5c, 1, 5, "MOV_E_H"));
        hm.insert(MOV_E_L, Instruction::new(0x5d, 1, 5, "MOV_E_L"));
        hm.insert(MOV_E_M, Instruction::new(0x5e, 1, 7, "MOV_E_M"));
        hm.insert(MOV_E_A, Instruction::new(0x5f, 1, 5, "MOV_E_A"));
        hm.insert(MOV_H_B, Instruction::new(0x60, 1, 5, "MOV_H_B"));
        hm.insert(MOV_H_C, Instruction::new(0x61, 1, 5, "MOV_H_C"));
        hm.insert(MOV_H_D, Instruction::new(0x62, 1, 5, "MOV_H_D"));
        hm.insert(MOV_H_E, Instruction::new(0x63, 1, 5, "MOV_H_E"));
        hm.insert(MOV_H_H, Instruction::new(0x64, 1, 5, "MOV_H_H"));
        hm.insert(MOV_H_L, Instruction::new(0x65, 1, 5, "MOV_H_L"));
        hm.insert(MOV_H_M, Instruction::new(0x66, 1, 7, "MOV_H_M"));
        hm.insert(MOV_H_A, Instruction::new(0x67, 1, 5, "MOV_H_A"));
        hm.insert(MOV_L_B, Instruction::new(0x68, 1, 5, "MOV_L_B"));
        hm.insert(MOV_L_C, Instruction::new(0x69, 1, 5, "MOV_L_C"));
        hm.insert(MOV_L_D, Instruction::new(0x6a, 1, 5, "MOV_L_D"));
        hm.insert(MOV_L_E, Instruction::new(0x6b, 1, 5, "MOV_L_E"));
        hm.insert(MOV_L_H, Instruction::new(0x6c, 1, 5, "MOV_L_H"));
        hm.insert(MOV_L_L, Instruction::new(0x6d, 1, 5, "MOV_L_L"));
        hm.insert(MOV_L_M, Instruction::new(0x6e, 1, 7, "MOV_L_M"));
        hm.insert(MOV_L_A, Instruction::new(0x6f, 1, 5, "MOV_L_A"));
        hm.insert(MOV_M_B, Instruction::new(0x70, 1, 7, "MOV_M_B"));
        hm.insert(MOV_M_C, Instruction::new(0x71, 1, 7, "MOV_M_C"));
        hm.insert(MOV_M_D, Instruction::new(0x72, 1, 7, "MOV_M_D"));
        hm.insert(MOV_M_E, Instruction::new(0x73, 1, 7, "MOV_M_E"));
        hm.insert(MOV_M_H, Instruction::new(0x74, 1, 7, "MOV_M_H"));
        hm.insert(MOV_M_L, Instruction::new(0x75, 1, 7, "MOV_M_L"));
        hm.insert(HLT, Instruction::new(0x76, 1, 7, "HLT"));
        hm.insert(MOV_M_A, Instruction::new(0x77, 1, 7, "MOV_M_A"));
        hm.insert(MOV_A_B, Instruction::new(0x78, 1, 5, "MOV_A_B"));
        hm.insert(MOV_A_C, Instruction::new(0x79, 1, 5, "MOV_A_C"));
        hm.insert(MOV_A_D, Instruction::new(0x7a, 1, 5, "MOV_A_D"));
        hm.insert(MOV_A_E, Instruction::new(0x7b, 1, 5, "MOV_A_E"));
        hm.insert(MOV_A_H, Instruction::new(0x7c, 1, 5, "MOV_A_H"));
        hm.insert(MOV_A_L, Instruction::new(0x7d, 1, 5, "MOV_A_L"));
        hm.insert(MOV_A_M, Instruction::new(0x7e, 1, 7, "MOV_A_M"));
        hm.insert(MOV_A_A, Instruction::new(0x7f, 1, 5, "MOV_A_A"));
        hm.insert(ADD_B, Instruction::new(0x80, 1, 4, "ADD_B"));
        hm.insert(ADD_C, Instruction::new(0x81, 1, 4, "ADD_C"));
        hm.insert(ADD_D, Instruction::new(0x82, 1, 4, "ADD_D"));
        hm.insert(ADD_E, Instruction::new(0x83, 1, 4, "ADD_E"));
        hm.insert(ADD_H, Instruction::new(0x84, 1, 4, "ADD_H"));
        hm.insert(ADD_L, Instruction::new(0x85, 1, 4, "ADD_L"));
        hm.insert(ADD_M, Instruction::new(0x86, 1, 7, "ADD_M"));
        hm.insert(ADD_A, Instruction::new(0x87, 1, 4, "ADD_A"));
        hm.insert(ADC_B, Instruction::new(0x88, 1, 4, "ADC_B"));
        hm.insert(ADC_C, Instruction::new(0x89, 1, 4, "ADC_C"));
        hm.insert(ADC_D, Instruction::new(0x8a, 1, 4, "ADC_D"));
        hm.insert(ADC_E, Instruction::new(0x8b, 1, 4, "ADC_E"));
        hm.insert(ADC_H, Instruction::new(0x8c, 1, 4, "ADC_H"));
        hm.insert(ADC_L, Instruction::new(0x8d, 1, 4, "ADC_L"));
        hm.insert(ADC_M, Instruction::new(0x8e, 1, 7, "ADC_M"));
        hm.insert(ADC_A, Instruction::new(0x8f, 1, 4, "ADC_A"));
        hm.insert(SUB_B, Instruction::new(0x90, 1, 4, "SUB_B"));
        hm.insert(SUB_C, Instruction::new(0x91, 1, 4, "SUB_C"));
        hm.insert(SUB_D, Instruction::new(0x92, 1, 4, "SUB_D"));
        hm.insert(SUB_E, Instruction::new(0x93, 1, 4, "SUB_E"));
        hm.insert(SUB_H, Instruction::new(0x94, 1, 4, "SUB_H"));
        hm.insert(SUB_L, Instruction::new(0x95, 1, 4, "SUB_L"));
        hm.insert(SUB_M, Instruction::new(0x96, 1, 7, "SUB_M"));
        hm.insert(SUB_A, Instruction::new(0x97, 1, 4, "SUB_A"));
        hm.insert(SBB_B, Instruction::new(0x98, 1, 4, "SBB_B"));
        hm.insert(SBB_C, Instruction::new(0x99, 1, 4, "SBB_C"));
        hm.insert(SBB_D, Instruction::new(0x9a, 1, 4, "SBB_D"));
        hm.insert(SBB_E, Instruction::new(0x9b, 1, 4, "SBB_E"));
        hm.insert(SBB_H, Instruction::new(0x9c, 1, 4, "SBB_H"));
        hm.insert(SBB_L, Instruction::new(0x9d, 1, 4, "SBB_L"));
        hm.insert(SBB_M, Instruction::new(0x9e, 1, 7, "SBB_M"));
        hm.insert(SBB_A, Instruction::new(0x9f, 1, 4, "SBB_A"));
        hm.insert(ANA_B, Instruction::new(0xa0, 1, 4, "ANA_B"));
        hm.insert(ANA_C, Instruction::new(0xa1, 1, 4, "ANA_C"));
        hm.insert(ANA_D, Instruction::new(0xa2, 1, 4, "ANA_D"));
        hm.insert(ANA_E, Instruction::new(0xa3, 1, 4, "ANA_E"));
        hm.insert(ANA_H, Instruction::new(0xa4, 1, 4, "ANA_H"));
        hm.insert(ANA_L, Instruction::new(0xa5, 1, 4, "ANA_L"));
        hm.insert(ANA_M, Instruction::new(0xa6, 1, 7, "ANA_M"));
        hm.insert(ANA_A, Instruction::new(0xa7, 1, 4, "ANA_A"));
        hm.insert(XRA_B, Instruction::new(0xa8, 1, 4, "XRA_B"));
        hm.insert(XRA_C, Instruction::new(0xa9, 1, 4, "XRA_C"));
        hm.insert(XRA_D, Instruction::new(0xaa, 1, 4, "XRA_D"));
        hm.insert(XRA_E, Instruction::new(0xab, 1, 4, "XRA_E"));
        hm.insert(XRA_H, Instruction::new(0xac, 1, 4, "XRA_H"));
        hm.insert(XRA_L, Instruction::new(0xad, 1, 4, "XRA_L"));
        hm.insert(XRA_M, Instruction::new(0xae, 1, 7, "XRA_M"));
        hm.insert(XRA_A, Instruction::new(0xaf, 1, 4, "XRA_A"));
        hm.insert(ORA_B, Instruction::new(0xb0, 1, 4, "ORA_B"));
        hm.insert(ORA_C, Instruction::new(0xb1, 1, 4, "ORA_C"));
        hm.insert(ORA_D, Instruction::new(0xb2, 1, 4, "ORA_D"));
        hm.insert(ORA_E, Instruction::new(0xb3, 1, 4, "ORA_E"));
        hm.insert(ORA_H, Instruction::new(0xb4, 1, 4, "ORA_H"));
        hm.insert(ORA_L, Instruction::new(0xb5, 1, 4, "ORA_L"));
        hm.insert(ORA_M, Instruction::new(0xb6, 1, 7, "ORA_M"));
        hm.insert(ORA_A, Instruction::new(0xb7, 1, 4, "ORA_A"));
        hm.insert(CMP_B, Instruction::new(0xb8, 1, 4, "CMP_B"));
        hm.insert(CMP_C, Instruction::new(0xb9, 1, 4, "CMP_C"));
        hm.insert(CMP_D, Instruction::new(0xba, 1, 4, "CMP_D"));
        hm.insert(CMP_E, Instruction::new(0xbb, 1, 4, "CMP_E"));
        hm.insert(CMP_H, Instruction::new(0xbc, 1, 4, "CMP_H"));
        hm.insert(CMP_L, Instruction::new(0xbd, 1, 4, "CMP_L"));
        hm.insert(CMP_M, Instruction::new(0xbe, 1, 7, "CMP_M"));
        hm.insert(CMP_A, Instruction::new(0xbf, 1, 4, "CMP_A"));
        hm.insert(RNZ, Instruction::new(0xc0, 1, 5, "RNZ"));
        hm.insert(POP_B, Instruction::new(0xc1, 1, 10, "POP_B"));
        hm.insert(JNZ_ADR, Instruction::new(0xc2, 3, 10, "JNZ_ADR"));
        hm.insert(JMP_ADR, Instruction::new(0xc3, 3, 10, "JMP_ADR"));
        hm.insert(CNZ_ADR, Instruction::new(0xc4, 3, 11, "CNZ_ADR"));
        hm.insert(PUSH_B, Instruction::new(0xc5, 1, 11, "PUSH_B"));
        hm.insert(ADI_D8, Instruction::new(0xc6, 2, 7, "ADI_D8"));
        hm.insert(RST_0, Instruction::new(0xc7, 1, 11, "RST_0"));
        hm.insert(RZ, Instruction::new(0xc8, 1, 5, "RZ"));
        hm.insert(RET, Instruction::new(0xc9, 1, 10, "RET"));
        hm.insert(JZ_ADR, Instruction::new(0xca, 3, 10, "JZ_ADR"));
        hm.insert(CZ_ADR, Instruction::new(0xcc, 3, 11, "CZ_ADR"));
        hm.insert(CALL_ADR, Instruction::new(0xcd, 3, 17, "CALL_ADR"));
        hm.insert(ACI_D8, Instruction::new(0xce, 2, 7, "ACI_D8"));
        hm.insert(RST_1, Instruction::new(0xcf, 1, 11, "RST_1"));
        hm.insert(RNC, Instruction::new(0xd0, 1, 5, "RNC"));
        hm.insert(POP_D, Instruction::new(0xd1, 1, 10, "POP_D"));
        hm.insert(JNC_ADR, Instruction::new(0xd2, 3, 10, "JNC_ADR"));
        hm.insert(OUT_D8, Instruction::new(0xd3, 2, 10, "OUT_D8"));
        hm.insert(CNC_ADR, Instruction::new(0xd4, 3, 11, "CNC_ADR"));
        hm.insert(PUSH_D, Instruction::new(0xd5, 1, 11, "PUSH_D"));
        hm.insert(SUI_D8, Instruction::new(0xd6, 2, 7, "SUI_D8"));
        hm.insert(RST_2, Instruction::new(0xd7, 1, 11, "RST_2"));
        hm.insert(RC, Instruction::new(0xd8, 1, 5, "RC"));
        hm.insert(JC_ADR, Instruction::new(0xda, 3, 10, "JC_ADR"));
        hm.insert(IN_D8, Instruction::new(0xdb, 2, 10, "IN_D8"));
        hm.insert(CC_ADR, Instruction::new(0xdc, 3, 11, "CC_ADR"));
        hm.insert(SBI_D8, Instruction::new(0xde, 2, 7, "SBI_D8"));
        hm.insert(RST_3, Instruction::new(0xdf, 1, 11, "RST_3"));
        hm.insert(RPO, Instruction::new(0xe0, 1, 5, "RPO"));
        hm.insert(POP_H, Instruction::new(0xe1, 1, 10, "POP_H"));
        hm.insert(JPO_ADR, Instruction::new(0xe2, 3, 10, "JPO_ADR"));
        hm.insert(XTHL, Instruction::new(0xe3, 1, 18, "XTHL"));
        hm.insert(CPO_ADR, Instruction::new(0xe4, 3, 11, "CPO_ADR"));
        hm.insert(PUSH_H, Instruction::new(0xe5, 1, 11, "PUSH_H"));
        hm.insert(ANI_D8, Instruction::new(0xe6, 2, 7, "ANI_D8"));
        hm.insert(RST_4, Instruction::new(0xe7, 1, 11, "RST_4"));
        hm.insert(RPE, Instruction::new(0xe8, 1, 5, "RPE"));
        hm.insert(PCHL, Instruction::new(0xe9, 1, 5, "PCHL"));
        hm.insert(JPE_ADR, Instruction::new(0xea, 3, 10, "JPE_ADR"));
        hm.insert(XCHG, Instruction::new(0xeb, 1, 5, "XCHG"));
        hm.insert(CPE_ADR, Instruction::new(0xec, 3, 11, "CPE_ADR"));
        hm.insert(XRI_D8, Instruction::new(0xee, 2, 7, "XRI_D8"));
        hm.insert(RST_5, Instruction::new(0xef, 1, 11, "RST_5"));
        hm.insert(RP, Instruction::new(0xf0, 1, 5, "RP"));
        hm.insert(POP_PSW, Instruction::new(0xf1, 1, 10, "POP_PSW"));
        hm.insert(JP_ADR, Instruction::new(0xf2, 3, 10, "JP_ADR"));
        hm.insert(DI, Instruction::new(0xf3, 1, 4, "DI"));
        hm.insert(CP_ADR, Instruction::new(0xf4, 3, 11, "CP_ADR"));
        hm.insert(PUSH_PSW, Instruction::new(0xf5, 1, 11, "PUSH_PSW"));
        hm.insert(ORI_D8, Instruction::new(0xf6, 2, 7, "ORI_D8"));
        hm.insert(RST_6, Instruction::new(0xf7, 1, 11, "RST_6"));
        hm.insert(RM, Instruction::new(0xf8, 1, 5, "RM"));
        hm.insert(SPHL, Instruction::new(0xf9, 1, 5, "SPHL"));
        hm.insert(JM_ADR, Instruction::new(0xfa, 3, 10, "JM_ADR"));
        hm.insert(EI, Instruction::new(0xfb, 1, 4, "EI"));
        hm.insert(CM_ADR, Instruction::new(0xfc, 3, 11, "CM_ADR"));
        hm.insert(CPI_D8, Instruction::new(0xfe, 2, 7, "CPI_D8"));
        hm.insert(RST_7, Instruction::new(0xff, 1, 11, "RST_7"));        
        hm
    };
}
*/